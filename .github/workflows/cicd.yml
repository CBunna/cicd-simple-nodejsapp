name: NodeJS CICD

on:
  push:
    branches: [main, docker, feature/github-action]
  pull_request:
    branches: [main]
jobs:
  # jobs name
  test:
    # which os that job will be run
    runs-on: ubuntu-latest
    # STEPS
    steps:
      # pull the code fron repo
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up node js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Linter
      - name: Run Linter
        run: npm run lint

      # test - JEST
      - name: Run test
        run: npm run test

      # Start server and health check
      - name: Start server and health check
        run: |
          npm start &
          sleep 5
          npm run health-check
          pkill -f "node src/app.js" || true

  # This job ensures your project's dependencies don't have known security vulnerabilities before deployment, acting as an automated security gate in your CI/CD pipeline.
  security:
    # Runs on the latest Ubuntu virtual machine
    runs-on: ubuntu-latest
    # need test job
    needs:
      test
      # Steps
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

        # Setup Nodejs
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

        # Install Dependencies
      - name: Install dependencies
        run:
          npm ci

          # Run Security audit
      - name: Run Security audit
        run: npm audit --audit-level moderate

  # This job creates a production-ready build of the application after ensuring it passes tests and security checks. The artifacts can then be used for deployment or downloaded for manual inspection.
  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor}}
          password: ${{ secrets.GITHUB_TOKEN}}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=commit-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
